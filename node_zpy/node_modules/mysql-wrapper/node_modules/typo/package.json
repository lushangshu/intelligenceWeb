{
  "name": "typo",
  "version": "0.1.14",
  "description": "Typo is a scalable template engine designed for cli, which help to format your console output! Typo supports full 256-color ANSI background and foreground, underline, italic, etc.",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "keywords": [
    "typo",
    "stdout",
    "console",
    "console.log",
    "ansi",
    "color",
    "template",
    "engine",
    "typography",
    "cli",
    "command-line",
    "handlebar",
    "mustache",
    "template engine",
    "format",
    "bold",
    "underline",
    "italic",
    "background",
    "ascii",
    "plugin"
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/kaelzhang/typo.git"
  },
  "author": {
    "name": "kael"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/kaelzhang/typo/issues"
  },
  "dependencies": {},
  "readme": "# Typo\n\n> Make typography beautiful in command-line.\n\nTypo is a scalable node.js template engine designed for and focused on command-line (cli), which helps to format and beautify your console output.\n\nTypo supports not only basic [ANSI escope codes](http://en.wikipedia.org/wiki/ANSI_escape_code), such as basic background and foreground colors, underline, bold, etc, and **ALSO** full 8-bit colors (256 colors).\n\n![screenshot](https://raw.github.com/kaelzhang/typo/master/screenshot.png)\n\n## Installation\n\n```bash\nnpm install typo --save\n```\n    \n## Getting started\n\nTypo is a [`Readable stream`](http://nodejs.org/api/stream.html#stream_class_stream_readable), which means you can `.pipe()` and `.on('data', c)` with it.\n\n```js\n// create a typo instance\nvar typo = require('typo')();\n\n// remember to pipe\ntypo.pipe(process.stdout); // or, `var typo = require('typo')({output: process.stdout})`\n\ntypo.log(\"There's once in a {{blue blue}} moon~\");\n```\n\n## Typo Plugins\n\n- [typo-rgb](https://github.com/kaelzhang/typo-rgb): support full 8-bit RGB colors !\n- [typo-image](https://github.com/kaelzhang/typo-image): display pictures in CLI !\n- [typo-ascii](https://github.com/kaelzhang/typo-ascii): ascii art text in CLI with all kinds of styles ! (on developing)\n\n****\n\n## Usage\n\n### Syntax\n\n\t( '{{<helper[:<data>][|helper[:<data>]]> <text>}}', <object> );\n\n#### Simple substitution\n\n```js\ntypo.log('{{1}}{{b}}{{c.a}}{{c.b}}', {'1': 1, b:2, c: {a: 3}}); \n// print '123c.b'.\n// in which, `'c.b'` is not matched in `values` and not substituted.\n```\n    \n#### With helper functions\n\n```js\ntypo.log('{{bold abc}}');         // print a bold 'abc'\ntypo.log('{{red abc}}');  \t\t   // print a red 'abc'\n```\n    \n#### With piped helpers\n\n```js\ntypo.log('{{bold|blue|underline abc}}'); // print a blue bold 'abc' with a underline\n````\n    \n#### Custom helpers\n\n```js\ntypo.register('sum', function(value){{\n    return value.split(',').reduce(function(prev, current){\n        return (parseInt(current) || 0) + prev;\n    }, 0);\n}});\n\ntypo.log('{{sum 1,2,3}}');         // print 6\n```\n\n#### Working with plugins\n\nYou need to install plugins first.\n```sh\nnpm install typo-image\n```\n\n```js\nvar image = require('typo-image');\ntypo.plugin(image);\n\ntypo.log('{{~image ./logo.png}}');  // will print the png image to the CLI !\n```\n    \n#### Nested helpers\n\n```js\ntypo.log('{#list}3{/list}');\n```\n\nWhich will not show up before `typo@1.0.0`.\n\nif you like `typo`, there will be a billion thanks if you fork `typo` and make pull requests.\n\n## Available helpers\nThe helpers below are built-in helpers of typo, and you could define your own helpers by `typo.register` method.\n\nYou can also use `typo.plugin` method to register helpers of typo plugins.\n\n### Basic colors\n\nEight basic ANSI colors:\n\n0     |  1  |   2   |    3   |  4   |    5    |  6   |   7\n----- | --- | ----- | ------ | ---- | ------- | ---- | -----\nblack | red | green | yellow | blue | magenta | cyan | white\n\n\ttypo.log('{{magenta purple text}}');\n\t\n### Other text styles\n\n- italic # not widely supported. Sometimes treated as inverse.\n- bold\n- underline\n- inverse\n- strikethrough\n\n### Plugin: {{rgb:\\<rgb\\> \\<text\\>}}\n\n> You need to install plugin 'typo-rgb' to use this helper.\n\n```sh\nnpm install typo-rgb --save\n```\n\nHighlight your text `text` with any RGB colors filled in foreground. \n\nNotice that if your RGB color is not a standard 8-bit RGB color, typo will **automatically choose the closest** one in the color palette, which will be really helpful.\n\t\n```js\ntypo.plugin(require('typo-rgb'));\ntypo.log('{{bg.rgb:#f26d7d|rgb:#000|bold peach bg and black bold font}}');\n```\n\t\nThere's a background version of RGB: `{{bg.rgb:<rgb> <text>}}`.\n\n\n## Typo factory and typo constructor\n\nHow to create a typo instance.\n\n```js\nvar Typo = require('typo');\nvar typo = Typo(options);\n```\n\nOr\n\n```js\n// this is the typo constructor from which your module could be inherited.\nvar Typo = require('typo').Typo; \nvar typo = new Typo(options);\n```\n\n##### options.colors `Boolean`\n\nOptional, default to `true`\n\nIf false, typo will clean all styles (colors, bold, etc) and output the pure text, which is really helpfull if you use typo in CI.\n\n##### options.output `Stream.Writeable`\n\nOptional, no default value\n\nThe writeable stream to write into. If set, typo will `.pipe()` output to that stream.\n\nHowever, you could also use `.pipe()` method to do this.\n\n##### options.EOS `String`\n\nOptional, default to `'\\n'`\n\nThe End-of-Sentence. By default, it's a carriage return.\n\n\n## Instance Methods\n\nThese methods below is the methods of the typo instance.\n\n### typo.log(pattern [,values [,callback]])\nPrint a formated output to the command-line. Has no return value.\n\n##### pattern `string`\n\nTemplate pattern\n\n##### values `Object|Array`\n\nOptional\n\nIf no `values` passed or not matched, the relevant pattern will not be substituted.\n\n##### callback `function(err, output)`\n\nOptional\n\nTypo also support asynchronous help functions. See \"register asynchronous helpers\" section.\n\n\n### typo.template(pattern [,values [,callback]])\n\n##### Returns \n\nThe parsed or substituted ouput, if all helpers are synchronous.\n\nOr output will be passed to `callback`. \n\n### typo.register(name, helper)\n### typo.register(helpers_map)\n\nRegister helpers for the current instance\n\n##### name\n`string`\n\n##### helper (sync)\n`function(str)`\n\nWill be treated as a sync helper, if has **only one** [term parameter](http://en.wikipedia.org/wiki/Parameter_(computer_programming) (also called formal parameter);\n\nBesides, the `data` (in \"syntax\" section) could be fetched using `this.data` inside `helper`.\n\n##### helper (async)\n`function(str, callback)`\n\nIf helper has more than one term parameters, it will be treated as an async helper.\n\nAnd the second parameter will be the callback which should be implemented inside the helper function.\n\n##### helpers_map\n\n`Object`\n\n### typo.plugin(plugin)\n\nRegister a plugin\n\n##### plugin `Object`\n\nThe typo plugin.\n\n## Register global helpers and plugins\n\n```js\nvar Typo = require('typo');\n\nTypo.register(helpers); // the same parameters as `typo.register`\nTypo.plugin(plugin);\t // the same parameters as `typo.plugin`\n```\n",
  "readmeFilename": "README.md",
  "_id": "typo@0.1.14",
  "dist": {
    "shasum": "962dc4eaf985355c11a94ef891658124188f1d16",
    "tarball": "http://registry.npmjs.org/typo/-/typo-0.1.14.tgz"
  },
  "_from": "typo@>=0.1.11 <0.2.0",
  "_npmVersion": "1.3.8",
  "_npmUser": {
    "name": "kael",
    "email": "i@kael.me"
  },
  "maintainers": [
    {
      "name": "kael",
      "email": "i@kael.me"
    }
  ],
  "directories": {},
  "_shasum": "962dc4eaf985355c11a94ef891658124188f1d16",
  "_resolved": "https://registry.npmjs.org/typo/-/typo-0.1.14.tgz",
  "homepage": "https://github.com/kaelzhang/typo"
}
